openapi: 3.0.1
info:
  title: Provisioning API version 1
  version: v1
servers:
  - url: /
paths:
  /{brand_uuid}/api/provisioning/v1/addresses:
    post:
      tags:
        - Addresses
      summary: Creates an address
      operationId: createAddress
      parameters:
        - name: brand_uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Address"
      responses:
        201:
          description: address created
          content:
            application/json:
              schema:
                type: object
                properties:
                  "@id":
                    type: string
                    format: uuid
        401:
          description: unauthorized
          content: {}
        422:
          description: invalid request, errors are passed back in result.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProvisioningApiError"
      security:
        - api_key: []
  /{brand_uuid}/api/provisioning/v1/addresses/{id}:
    get:
      tags:
        - Addresses
      summary: Get an address
      operationId: getAddress
      parameters:
        - name: brand_uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: address found
          content:
            application/json:
              schema:
                type: object
                properties:
                  "@id":
                    type: string
                    format: uuid
                  unitNumber:
                    type: string
                    x-nullable: true
                  streetNumber:
                    type: string
                  streetName:
                    type: string
                  city:
                    type: string
                  suburb:
                    type: string
                  postcode:
                    type: string
                    x-nullable: true
                  region:
                    type: string
        401:
          description: unauthorized
          content: {}
        404:
          description: address not found
          content: {}
      security:
        - api_key: []
  /{brand_uuid}/api/provisioning/v1/parties:
    post:
      tags:
        - Parties
      summary: Creates a party
      operationId: createParty
      parameters:
        - name: brand_uuid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Party"
      responses:
        201:
          description: party created
          content:
            application/json:
              schema:
                type: object
                properties:
                  "@id":
                    type: string
                    format: uuid
        401:
          description: unauthorized
          content: {}
        422:
          description: invalid request, errors are passed back in result.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProvisioningApiError"
      security:
        - api_key: []
  /{brand_uuid}/api/provisioning/v1/parties/{id}:
    get:
      tags:
        - Parties
      summary: Get a party
      operationId: getParty
      parameters:
        - name: brand_uuid
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: party found
          content:
            application/json:
              schema:
                type: object
                properties:
                  "@id":
                    type: string
                    format: uuid
                  partyType:
                    type: string
                    enum:
                      - person
                  givenName:
                    type: string
                  additionalName:
                    type: string
                    x-nullable: true
                  familyName:
                    type: string
                  telephone:
                    type: string
                    x-nullable: true
                  email:
                    type: string
                    format: email
                  birthDate:
                    type: string
                    format: date
                    x-nullable: true
        404:
          description: party not found
          content: {}
      security:
        - api_key: []
  /{brand_uuid}/api/provisioning/v1/supply_agreements:
    post:
      tags:
        - Supply Agreements
      summary: Creates a supply agreement
      operationId: createSupplyAgreement
      parameters:
        - name: brand_uuid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SupplyAgreement"
      responses:
        201:
          description: supply agreement created
          content:
            application/json:
              schema:
                type: object
                properties:
                  "@id":
                    type: string
                    format: uuid
        401:
          description: unauthorized
          content: {}
        422:
          description: invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProvisioningApiError"
      security:
        - api_key: []
  /{brand_uuid}/api/provisioning/v1/supply_agreements/{id}:
    get:
      tags:
        - Supply Agreements
      summary: Get a supply agreement
      operationId: getSupplyAgreement
      parameters:
        - name: brand_uuid
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: supply agreement found
          content:
            application/json:
              schema:
                type: object
                properties:
                  "@id":
                    type: string
                    format: uuid
                  party:
                    type: object
                    properties:
                      "@id":
                        type: string
                        format: uuid
                  connection:
                    type: object
                    x-nullable: true
                    properties:
                      "@id":
                        type: string
                        format: uuid
                        x-nullable: true
                  address:
                    type: object
                    x-nullable: true
                    properties:
                      "@id":
                        type: string
                        format: uuid
                        x-nullable: true
        404:
          description: supply agreement not found
          content: {}
      security:
        - api_key: []
  /{brand_uuid}/api/provisioning/v1/connections:
    post:
      tags:
        - Connections
      summary: Creates a connection
      operationId: createConnection
      parameters:
        - name: brand_uuid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Connection"
      responses:
        201:
          description: connection created
          content:
            application/json:
              schema:
                type: object
                properties:
                  "@id":
                    type: string
                    format: uuid
        401:
          description: unauthorized
          content: {}
        422:
          description: invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProvisioningApiError"
      security:
        - api_key: []
  /{brand_uuid}/api/provisioning/v1/connections/{id}:
    get:
      tags:
        - Connections
      summary: Get a connection
      operationId: getConnection
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: brand_uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: connection found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connection"
        404:
          description: connection not found
          content: {}
      security:
        - api_key: []
components:
  securitySchemes:
    api_key:
      type: apiKey
      name: Authorization
      in: header
  schemas:
    Connection:
      type: object
      required:
        - external_identifier
        - utility_type
      properties:
        identifier:
          type: string
          description: "UUID identifier of actual connection record"
        external_identifier:
          type: string
          description: "ICP/MIRN/etc number as appropriate to market"
        utility_type:
          $ref: "#/components/schemas/UtilityType"
        someDateTime:
          type: string
          format: DateTime
        someDate:
          type: string
          format: Date
    UtilityType:
      type: string
      description: "external_identifier's must match the type of utility and are validated"
      enum:
        - electricity
        - gas
    ProvisioningApiError:
      required:
        - errors
      properties:
        errors:
          type: array
          items:
            type: string
    SupplyAgreement:
      type: object
      required:
        - party
      properties:
        identifier:
          type: string
          description: "UUID identifier of actual supply agreement record"
        party:
          type: object
          properties:
            "@id":
              type: string
              format: uuid
        connection:
          type: object
          properties:
            "@id":
              type: string
              format: uuid
        address:
          type: object
          properties:
            "@id":
              type: string
              format: uuid
    Party:
      type: object
      required:
        - email
        - givenName
        - familyName
        - partyType
      properties:
        partyType:
          $ref: "#/components/schemas/PartyType"
        givenName:
          type: string
        additionalName:
          type: string
        familyName:
          type: string
        telephone:
          type: string
        email:
          type: string
          format: email
        birthDate:
          type: string
          format: date
    PartyType:
      type: string
      enum:
        - person
    Address:
      type: object
      required:
        - streetNumber
        - streetName
        - city
        - suburb
        - region
      properties:
        unitNumber:
          type: string
        streetNumber:
          type: string
        streetName:
          type: string
        city:
          type: string
        suburb:
          type: string
        postcode:
          type: string
        region:
          type: string
