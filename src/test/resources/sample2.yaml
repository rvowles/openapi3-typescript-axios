openapi: 3.0.1
info:
  title: test api
  description: Sample API for test case for k8s
  version: "1.1.1"
paths:
  /api/v1/test:
    get:
      operationId: getTest
      tags:
        - InheritanceService
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TestDTO"
    post:
      operationId: postTest1
      tags:
        - InheritanceService
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/TestDTO"
      responses:
        "200":
          description: "upcoming events"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AeItemVO"
  /api/v1/test2:
    put:
      operationId: getTest2
      tags:
        - InheritanceService
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: "#/components/schemas/TestDTO"
  /event/upcoming:
    post:
      tags:
        - ControlService
      description: "Get the list of upcoming events"
      operationId: upcoming-events
      x-dart-rich-operationId: upcoming-events-test
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                id:
                  type: string
                secret:
                  type: string
                params:
                  $ref: '#/components/schemas/EventRequest'
            encoding:
              params:
                contentType: application/json
      responses:
        "200":
          description: "upcoming events"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventResponse"
  /event/getstatus:
    post:
      tags:
        - ControlService
      description: "get individual event"
      operationId: getEvent
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                id:
                  type: string
                secret:
                  type: string
                params:
                  $ref: '#/components/schemas/UniqueEventRequest'
            encoding:
              params:
                contentType: application/json
      responses:
        "200":
          description: "individual event status"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "401":
          description: "failed perms"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddProps3"
        "403":
          description: "failed perms"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventResponse"
  /event/upcoming2:
    post:
      tags:
        - ControlService
      description: "Get the list of upcoming events"
      operationId: upcomingEvents2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/EventRequest'
                - $ref: '#/components/schemas/EventResponse'
              discriminator:
                propertyName: discrim
      responses:
        "200":
          description: "upcoming events"
          content:
            application/yaml:
              schema:
                $ref: "#/components/schemas/EventResponse"
  /hello:
    get:
      tags:
        - TestService
      operationId: helloOp
      responses:
        "200":
          description: "Resulting weird api"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/com.bluetrainsoftware.AddProps1"
  /hello2:
    get:
      tags:
        - TestService
      operationId: helloOp2
      responses:
        "200":
          description: "Resulting weird api"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/com.bluetrainsoftware.AddProps2"
  /one-off:
    post:
      tags:
        - TestService
      operationId: helloOp3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MyRequest"
      responses:
        "200":
          description: check
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/com.bluetrainsoftware.AddProps2"
components:
  schemas:
    MyRequest:
      oneOf:
        - $ref: "#/components/schemas/EventRequest"
        - $ref: "#/components/schemas/AddProps3"
      discriminator:
        propertyName: discrim
        mapping:
          dog: "#/components/schemas/AddProps3"
    EventRequest:
      additionalProperties: true
      properties:
        user_id:
          type: string
        enable_to_watch:
          type: integer
        discrim:
          type: string
    EventResponse:
      properties:
        discrim:
          type: string
        error:
          type: integer
        error_msg:
          type: string
        listofNumbers:
          type: array
          items:
            type: number
        listOfIntegers:
          type: array
          items:
            type: integer
        listOfIntString:
          type: array
          items:
            type: string
            format: int-or-string
        dateEventsHappen:
          type: array
          items:
            type: string
            format: date
        whenEventsHappen:
          type: array
          items:
            type: string
            format: date-time
        eventStatuses:
          type: array
          items:
            $ref: "#/components/schemas/EventStatus"
        events:
          type: array
          items:
            $ref: "#/components/schemas/Event"
    Event:
      properties:
        status:
          $ref: "#/components/schemas/EventStatus"
        id:
          type: string
        title:
          type: string
        img:
          type: string
        imageUrl:
          type: string
        someUniqueSet:
          uniqueItems: true
          type: array
          items:
            type: number
    EventStatus:
      type: string
      enum:
        - STREAMING
        - ALLOCATING
        - ALLOCATED
        - CLOSING
        - CLOSED
        - PENDING
        - ARCHIVING
    "com.bluetrainsoftware.AddProps1":
      properties:
        extra:
          type: object
          additionalProperties:
            items:
              type: string
            type: array
          description: "used extensively in k8s api and generates weird code"
        yet_other_things:
          type: object
          additionalProperties:
            items:
              type: integer
            type: array
        dependencies:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/com.bluetrainsoftware.AddProps2"
        groups:
          type: array
          description: "names groups this user is part of"
          items:
            type: string
        name:
          type: string
        mess$age:
          $ref: "#/components/schemas/Messages"
        $justObjects:
          type: array
          items:
            $ref: "#/components/schemas/JSONType"
        myIntegers:
          type: array
          items:
            type: integer
    "com.bluetrainsoftware.AddProps2":
      properties:
        extra:
          type: object
          additionalProperties:
            type: object
            properties:
              code:
                type: integer
              text:
                type: string
    SimpleEnum:
      type: string
      enum:
        - cumberlands
        - sage_and_onion
        - sweet_pickle
    AddProps3:
      properties:
        discrim:
          type: string
        extra:
          type: object
          x-property-ref: "#/components/schemas/SimpleEnum"
          additionalProperties:
            type: array
            uniqueItems: true
            items:
              $ref: "#/components/schemas/TimeType"
        dependencies:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: "#/components/schemas/JSONType"
        otherDeps:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/SecondJsonType"
        yetMoreAdditional:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        mapWithComplexObject:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: "#/components/schemas/Event"
        mapWithEnums:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: "#/components/schemas/EventStatus"
    "com.bluetrain-software.AddProps4":
      properties:
        extra:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/TimeType"
    JSONType:
      description: "can be anything, no properties"
    SecondJsonType:
      description: "can be anything, no properties"
    TimeType:
      type: string
      format: date-time
    Messages:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Message'
    Message:
      type: object
      properties:
        code:
          type: integer
        text:
          type: string
    UniqueEventRequest:
      type: array
      uniqueItems: true
      items:
        $ref: "#/components/schemas/UniqueEvent"
    UniqueEvent:
      type: object
      properties:
        unique_url:
          type: string
    EnumsTest:
      type: array
      items:
        $ref: "#/components/schemas/JSONType"
    SampleObject:
      type: object
      properties:
        enums:
          $ref: "#/components/schemas/EnumsTest"
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps":
      description: "JSONSchemaProps is a JSON-Schema following Specification Draft 4 (http://json-schema.org/)."
      properties:
        "$ref":
          type: string
        "$schema":
          type: string
        default:
          $ref: "#/components/schemas/JSONType"
        enum:
          items:
            $ref: "#/components/schemas/JSONType"
          type: array
        example:
          $ref: "#/components/schemas/JSONType"
    EnumsObjectTest:
      type: object
      properties:
        enums:
          type: array
          items:
            $ref: "#/components/schemas/JSONType"
    TestDTO:
      type: object
      properties:
        uniqueItemList:
          uniqueItems: true
          type: array
          items:
            type: integer
            format: int64
        itemList:
          type: array
          items:
            type: integer
            format: int64
    AeItemVO:
      required:
        - item_type_id
        - textValue
      type: object
      properties:
        id:
          type: integer
          format: int32
        uuid:
          type: string
        item_type_id:
          type: integer
          format: int32
        itemSpecId:
          type: integer
          format: int32
        textValue:
          type: string
        '@class':
          type: string
      discriminator:
        propertyName: '@class'
        mapping:
          AeItemInteger: '#/components/schemas/AeItemIntegerVO'
          AeItemString: '#/components/schemas/AeItemStringVO'
    AeItemIntegerVO:
      allOf:
        - $ref: '#/components/schemas/AeItemVO'
        - type: object
          properties:
            value:
              type: integer
              format: int32
          required:
            - value
    AeItemStringVO:
      allOf:
        - $ref: '#/components/schemas/AeItemVO'
        - type: object
          properties:
            value:
              type: string
          required:
            - value
    SignupReplyError:
      properties:
        schema_version:
          type: string
        data:
          $ref: '#/components/schemas/SignupReplyErrorDetails'
    SignupReplyErrorDetails:
      properties:
        errors:
          additionalProperties:
            $ref: '#/components/schemas/SignupReplyErrorKV'
    SignupReplyErrorKV:
      additionalProperties:
        $ref: '#/components/schemas/SignupReplyErrorList'
    SignupReplyErrorList:
      type: array
      items:
        type: string
    BaseClass:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
        clazz:
          type: string
    SubClass:
      allOf:
        - $ref: "#/components/schemas/BaseClass"
        - type: object
          properties:
            seatType:
              type: string
    BaseClassWithDiscriminator:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
        clazz:
          type: string
      discriminator:
        propertyName: clazz
    SubClassDiscrim:
      allOf:
        - $ref: "#/components/schemas/BaseClassWithDiscriminator"
        - type: object
          properties:
            seatType:
              type: string
